name: build

on:
  push:
    branches: [ main ]
  workflow_dispatch:

env:
  ZIP_NAME: SalesMaster.zip     # <— rename if your ZIP has a different name
  UNZIP_DIR: project            # where we unzip the project

jobs:
  android:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Verify ZIP exists (repo root)
        run: |
          ls -la
          test -f "$ZIP_NAME" || { echo "ZIP '$ZIP_NAME' not found in repo root."; exit 1; }

      - name: Unzip project
        run: |
          rm -rf "$UNZIP_DIR"
          mkdir -p "$UNZIP_DIR"
          unzip -q "$ZIP_NAME" -d "$UNZIP_DIR"

      - name: Detect Gradle project root
        id: detect
        shell: bash
        run: |
          set -e
          ROOT=""
          # Prefer a folder that has settings.gradle(.kts)
          CANDIDATES=$(find "$UNZIP_DIR" -maxdepth 3 -type f \( -name "settings.gradle" -o -name "settings.gradle.kts" \))
          if [ -n "$CANDIDATES" ]; then
            ROOT=$(dirname "$(echo "$CANDIDATES" | head -n1)")
          else
            # Fallback: look for build.gradle(.kts) in typical app module structure
            CANDIDATES=$(find "$UNZIP_DIR" -maxdepth 3 -type f \( -name "build.gradle" -o -name "build.gradle.kts" \))
            [ -n "$CANDIDATES" ] && ROOT=$(dirname "$(echo "$CANDIDATES" | head -n1)")
          fi
          if [ -z "$ROOT" ]; then
            echo "Could not locate a Gradle project (no settings.gradle* or build.gradle* found)."
            exit 1
          fi
          echo "project_dir=$ROOT" >> "$GITHUB_OUTPUT"
          echo "Detected Gradle root: $ROOT"

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: "17"

      # Reliable Android SDK/cmdline-tools + auto-accept licenses
      - name: Set up Android SDK
        uses: android-actions/setup-android@v3

      # Pin a Gradle version compatible with AGP (avoids Gradle 9.x issues)
      - name: Set up Gradle (cache & tools)
        uses: gradle/actions/setup-gradle@v3
        with:
          gradle-version: 8.5
          cache-read-only: false

      - name: Fix gradlew permissions (if present)
        working-directory: ${{ steps.detect.outputs.project_dir }}
        run: |
          if [ -f "./gradlew" ]; then
            chmod +x ./gradlew
          fi

      - name: Build Debug APK
        working-directory: ${{ steps.detect.outputs.project_dir }}
        shell: bash
        run: |
          set -e
          if [ -x "./gradlew" ]; then
            echo "Using Gradle Wrapper"
            ./gradlew --no-daemon assembleDebug
          else
            echo "No wrapper found — using system Gradle"
            gradle --version
            gradle --no-daemon assembleDebug
          fi

      - name: Upload Debug APK(s)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: debug-apks
          path: |
            ${{ steps.detect.outputs.project_dir }}/**/*.apk
          if-no-files-found: error
